# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle   #workflow 이름

on:
  pull_request:
    branches: [ "main" ]   #CI/CD가 발동되는 조건. pull request가 main브랜치에 발생 시 작동

permissions:
  contents: read

jobs:       
  build:     #build라는 이름의 job 시작
     
    runs-on: ubuntu-latest   #ubuntu 최신 기반에서 실행
 
    steps:                          #step시작
    - uses: actions/checkout@v3     #checkout이라는 action 실행. runner로 리포지토리 모든 코드를 복사해서 가져감.
    
    - name: Set up JDK 17           #setup-java라는 action 실행. jar파일을 만들기 위한 java 17을 세팅.
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Grant Execute Permission For Gradlew & Build gradle  #gradle 빌드. chmod로 gradlew를 실행할 수 있도록 권한을 변경.
      run: |
        chmod +x gradlew
        ./gradlew build             #이 부분 이후 jar파일 생성

    - name: DockerHub login         #docker hub 로그인 action 실행
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_ID }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Docker image build      #DockerFile 기반으로 최신화된 프로젝트 docker 이미지 생성
      run: |
        docker build -t ${{secrets.DOCKERHUB_ID}}/server .  
      
    - name: DockerHub push          #최신 docker 이미지를 docker hub에 push
      run: docker push ${{secrets.DOCKERHUB_ID}}/server 


  deploy:                           #deploy라는 이름의 job 시작
    runs-on: ubuntu-latest
    needs: build                    #build라는 이름의 job이 실행된 이후에 실행되도록 설정

    steps:
    - uses: actions/checkout@v3    

    - name: Copy docker-compose into instance   #내 인스턴스로 docker-compose.yml파일 복사.
      uses: appleboy/scp-action@master          #이미 존재하는 경우 덮어씀
      with: 
        host: ${{secrets.HOST}}
        username: ${{secrets.USERNAME}}
        key: ${{secrets.PRIVATEKEY}}               #배포하는 서버의 host이름, user이름, 개인키를 입력해야 접속됨
        source: "./docker-compose.yml"
        target: "/home/${{secrets.USERNAME}}"      #runner에 있는 docker-compose.yml을 배포하는 서버의 target이 지정한 경로에 복사
        strip_components: 1
        overwrite: true
        debug: true
  
    - name: Deploy to Instance
      uses: appleboy/ssh-action@master     #가장 최신 버젼 appleboy 사용. 배포하는 서버에 ssh접속을 하는 action.
      with:
        host: ${{secrets.GCP_HOST}}
        username: ${{secrets.GCP_USERNAME}} 
        key: ${{secrets.GCP_PRIVATEKEY}}  
        script: |                          #runner에서 배포하는 서버에 ssh접속 후, 다음 스크립트들을 실행.
          sudo docker login -u ${{ secrets.DOCKERHUB_ID }} -p ${{ secrets.DOCKERHUB_PASSWORD }}   #docker 로그인. docker pull을 하기 위함.
          sudo docker pull ${{secrets.DOCKERHUB_ID}}/server               #build에서 최신화된 docker 이미지를 pull로 가져옴.
          sudo docker rm -f $(docker ps -qa) 2>/dev/null || true          #기존에 배포서버에서 실행되던 서버 삭제.
          cd /home/${{secrets.USERNAME}}                                            
          sudo docker-compose up -d                                       #docker-compose.yml 기반으로 컨테이너들 실행
          sudo docker image prune -f                                      #기존에 배포서버에 있던 docker 이미지들 삭제. 안 하면 계속 쌓이게 됨.
